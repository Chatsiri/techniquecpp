#include <iostream>
#include <boost/shared_ptr.hpp>
#include <vector>

using namespace boost;
struct data_struct{
		std::vector<std::string>  data_vec;
};

template<typename info>
class 	shared_ptr_info
{
  public:
	shared_ptr_info(std::vector<shared_ptr<data_struct> > vec)
	{
			  std::cout<< " In shared_ptr_info , vec =  "<< vec.back() <<std::endl;	
				data_struct_ptr = &vec.back();
			  std::cout<< " Shared memory get = " << data_struct_ptr->get() <<std::endl;	
				data_struct * d_str = data_struct_ptr->get();
				info_  = d_str;
        std::cout<< " get to data_struct complete " <<std::endl;
	}

	data_struct *  get_info()
	{
			return info_;
	}
	
	private:
  shared_ptr<data_struct>  * data_struct_ptr;
	info * info_;
};	
	

class base_util
{
public:
		base_util()
		{
			std::cout<< "---Base_util---" <<std::endl;
		}

    virtual std::string get_data() = 0;	
		
		void init_data_struct()
		{
			std::cout<< "Init base class " <<std::endl;

		  data_struct str;
			std::string string_data = " data on base_util ";
			str.data_vec.push_back(string_data);

			data_ptr d_ptr(&str);
		  vec_ptr.push_back(d_ptr);

	    ptr_info info(vec_ptr);
			ptr_info_vec.push_back(info);
      	
		}

		std::string  get_test_base(){
			std::string data = "get_test_base()";
			return data;
    }

		std::vector<shared_ptr_info<data_struct> > * get_ptr_info()
		{
			 return &ptr_info_vec;
		} 	
	
private:
	typedef shared_ptr<data_struct> data_ptr;

	std::vector<data_ptr>    vec_ptr;
	
	typedef shared_ptr_info<data_struct>  ptr_info;
		
  std::vector<shared_ptr_info<data_struct> > ptr_info_vec;
};

class data_a : public base_util
{
	public:
		data_a(){ std::cout<< "Start data_a " <<std::endl; }
		std::string get_data() {
		std::cout<< "Get data in data_a " <<std::endl;
		std::cout<< "Get get_test_base in data_a = " <<this->get_test_base()<<std::endl;
		std::cout<<" Get address get_ptr_info() = " << this->get_ptr_info() <<std::endl;
     	//test base_util 
   		std::string temp = "temp"; 
      std::cout<<" Temp is equal = "<<temp<<std::endl;
		  std::string in_data = "in get_in_data_a"; 

		 return temp;
			 }
    std::string get_in_data_a() 
		{
			//test base_util 
			std::string temp = " temp null ";  
      std::cout<<" Temp is equal = "<<temp;
		  std::string in_data = "in get_in_data_a"; 
			 return in_data;
	  }
	private:
		std::string data;
};

class proxy_a : public base_util
{
	public:
  proxy_a(): a(new data_a())
	{

	}

  std::string get_in_data_a()
	{
			return a->get_in_data_a();
	}


  std::string get_data()
	{
			std::string in = "get_data in proxy_a ";
			return a->get_data();
	}

  
	private:
		proxy_a(const proxy_a&);
		const proxy_a &operator=(const proxy_a &);
    data_a  * a;
};
 



